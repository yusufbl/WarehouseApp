@page "/warehouse-table"
@using DataServices.Data
@using Microsoft.AspNetCore.Components
@inject IWarehouse WarehouseService
@using DataServices.Data

<h1>Warehouse List</h1>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Warehouse ID</th>
            <th>Warehouse Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var warehouse in Warehouses)
        {
            <tr>
                <td>@warehouse.WarehouseId</td>
                <td>@warehouse.WarehouseName</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => EditWarehouse(warehouse)">Edit</button>
                    <button class="btn btn-warning" @onclick="() => DeleteWarehouse(warehouse.WarehouseId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (EditWarehouseInfo != null)
{
<h2>Edit Warehouse</h2>
<form @onsubmit="UpdateWarehouse">
    <div class="form-group">
        <label for="editWarehouseId">Warehouse ID:</label>
        <input type="text" class="form-control" id="editWarehouseId" @bind="EditWarehouseInfo.WarehouseId" readonly />
    </div>
    <div class="form-group">
        <label for="editWarehouseName">Warehouse Name:</label>
        <input type="text" class="form-control" id="editWarehouseName" @bind="EditWarehouseInfo.WarehouseName" required />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </div>
</form>

}

@code {
    List<WarehouseInfo> Warehouses { get; set; }
    WarehouseInfo EditWarehouseInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Warehouses = await WarehouseService.GetWarehouseAsync();
    }

    void EditWarehouse(WarehouseInfo warehouse)
    {
        EditWarehouseInfo = warehouse;
    }

    async Task UpdateWarehouse()
    {
        if (EditWarehouseInfo != null)
        {
            bool success = await WarehouseService.UpdateWarehouseAsync(EditWarehouseInfo);
            if (success)
            {

                Warehouses = await WarehouseService.GetWarehouseAsync();
                EditWarehouseInfo = null;
            }
            else
            {
            }
        }
    }

    void CancelEdit()
    {
        EditWarehouseInfo = null; // DÃ¼zenleme modunu kapat
    }

    async Task DeleteWarehouse(string warehouseId)
    {
        bool success = await WarehouseService.DeleteWarehouseAsync(warehouseId);
        if (success)
        {
            Warehouses = await WarehouseService.GetWarehouseAsync();
        }
        else
        {
        }
    }
}
